# PostgreSQL initialization SQL (ConfigMap)
# - Creates schemas, tables, extensions, and indexes for app services
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init
  namespace: market-intelligence
data:
  init.sql: |
    -- Initialize database schema
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        username VARCHAR(255) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Instruments table
    CREATE TABLE IF NOT EXISTS instruments (
        instrument_id VARCHAR(255) PRIMARY KEY,
        market VARCHAR(100) NOT NULL,
        product VARCHAR(100) NOT NULL,
        location_code VARCHAR(100) NOT NULL,
        timezone VARCHAR(50) NOT NULL,
        unit VARCHAR(50) NOT NULL,
        currency VARCHAR(10) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Market price ticks table
    CREATE TABLE IF NOT EXISTS market_price_ticks (
        id SERIAL PRIMARY KEY,
        event_time TIMESTAMP NOT NULL,
        instrument_id VARCHAR(255) NOT NULL,
        location_code VARCHAR(100) NOT NULL,
        price_type VARCHAR(50) NOT NULL,
        value DECIMAL(10,4) NOT NULL,
        volume DECIMAL(12,4),
        currency VARCHAR(10) NOT NULL,
        unit VARCHAR(50) NOT NULL,
        source VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Forward curve points table
    CREATE TABLE IF NOT EXISTS forward_curve_points (
        id SERIAL PRIMARY KEY,
        run_id UUID NOT NULL,
        instrument_id VARCHAR(255) NOT NULL,
        delivery_start DATE NOT NULL,
        delivery_end DATE NOT NULL,
        tenor_type VARCHAR(50) NOT NULL,
        price DECIMAL(10,4) NOT NULL,
        currency VARCHAR(10) NOT NULL,
        unit VARCHAR(50) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Fundamentals series table
    CREATE TABLE IF NOT EXISTS fundamentals_series (
        id SERIAL PRIMARY KEY,
        instrument_id VARCHAR(255) NOT NULL,
        data_date DATE NOT NULL,
        fundamental_type VARCHAR(100) NOT NULL,
        value DECIMAL(15,6) NOT NULL,
        unit VARCHAR(50) NOT NULL,
        source VARCHAR(100) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Scenarios table
    CREATE TABLE IF NOT EXISTS scenarios (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        status VARCHAR(50) DEFAULT 'created',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Audit log table
    CREATE TABLE IF NOT EXISTS audit_log (
        id SERIAL PRIMARY KEY,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        user_id UUID,
        action VARCHAR(255) NOT NULL,
        resource_type VARCHAR(100),
        resource_id VARCHAR(255),
        details JSONB,
        ip_address INET,
        user_agent TEXT,
        trace_id VARCHAR(255)
    );

    -- Backtest results table
    CREATE TABLE IF NOT EXISTS backtest_results (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        scenario_id UUID,
        instrument_id VARCHAR(255),
        start_date DATE NOT NULL,
        end_date DATE NOT NULL,
        mape DECIMAL(5,4),
        rmse DECIMAL(10,4),
        r2_score DECIMAL(5,4),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_market_price_ticks_event_time ON market_price_ticks(event_time);
    CREATE INDEX IF NOT EXISTS idx_market_price_ticks_instrument_id ON market_price_ticks(instrument_id);
    CREATE INDEX IF NOT EXISTS idx_forward_curve_points_run_id ON forward_curve_points(run_id);
    CREATE INDEX IF NOT EXISTS idx_forward_curve_points_instrument_id ON forward_curve_points(instrument_id);
    CREATE INDEX IF NOT EXISTS idx_fundamentals_series_instrument_date ON fundamentals_series(instrument_id, data_date);
    CREATE INDEX IF NOT EXISTS idx_audit_log_timestamp ON audit_log(timestamp);
    CREATE INDEX IF NOT EXISTS idx_backtest_results_scenario_id ON backtest_results(scenario_id);
